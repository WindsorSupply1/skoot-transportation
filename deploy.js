#!/usr/bin/env node

/**
 * SKOOT Transportation Deployment Assistant
 * Interactive script to help deploy the booking system
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function ask(question) {
  return new Promise(resolve => {
    rl.question(question, resolve);
  });
}

async function main() {
  console.log(`
🚀 SKOOT Transportation Deployment Assistant
============================================

This script will help you deploy your booking system to production.
Please have the following ready:
- Domain name
- Google OAuth credentials
- Amazon Login credentials  
- Stripe live API keys
- Production database URL

Let's get started!
`);

  // Collect deployment information
  const config = {};
  
  console.log('\n📋 Basic Configuration');
  config.domain = await ask('Enter your domain (e.g., skoot.bike): ');
  config.businessEmail = await ask('Enter your business email: ');
  config.supportPhone = await ask('Enter support phone number: ');
  
  console.log('\n🔐 Database Configuration');
  config.databaseUrl = await ask('Enter production database URL: ');
  
  console.log('\n🔑 Google OAuth Credentials');
  config.googleClientId = await ask('Enter Google Client ID: ');
  config.googleClientSecret = await ask('Enter Google Client Secret: ');
  
  console.log('\n🔑 Amazon Login Credentials');
  config.amazonClientId = await ask('Enter Amazon Client ID: ');
  config.amazonClientSecret = await ask('Enter Amazon Client Secret: ');
  
  console.log('\n💳 Stripe Configuration');
  config.stripePublishableKey = await ask('Enter Stripe Publishable Key (pk_live_...): ');
  config.stripeSecretKey = await ask('Enter Stripe Secret Key (sk_live_...): ');
  config.stripeWebhookSecret = await ask('Enter Stripe Webhook Secret (whsec_...): ');
  
  console.log('\n📧 Email Configuration');
  config.smtpUser = await ask('Enter SMTP username (usually your Gmail): ');
  config.smtpPass = await ask('Enter SMTP app password: ');
  
  // Generate NextAuth secret
  config.nextAuthSecret = generateRandomString(32);
  
  // Create production environment file
  const envContent = createEnvFile(config);
  fs.writeFileSync('.env.production', envContent);
  
  console.log('\n✅ Configuration files created!');
  
  // Create Vercel configuration
  const vercelConfig = createVercelConfig(config);
  fs.writeFileSync('vercel.json', JSON.stringify(vercelConfig, null, 2));
  
  console.log('\n📋 Next Steps:');
  console.log('1. Run: npm run build (to test build)');
  console.log('2. Run: vercel --prod (to deploy to Vercel)');
  console.log('3. Configure your domain DNS settings');
  console.log('4. Test the live system');
  console.log('5. Set up initial pickup locations in admin panel');
  
  console.log('\n🔗 Important URLs:');
  console.log(`- Website: https://${config.domain}`);
  console.log(`- Admin Panel: https://${config.domain}/admin`);
  console.log(`- Booking System: https://${config.domain}/booking`);
  
  console.log('\n📚 See PRODUCTION_DEPLOYMENT_GUIDE.md for detailed instructions');
  
  rl.close();
}

function generateRandomString(length) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

function createEnvFile(config) {
  return `# SKOOT Transportation Production Environment
# Generated by deployment assistant

# Database
DATABASE_URL="${config.databaseUrl}"

# NextAuth Configuration  
NEXTAUTH_URL="https://${config.domain}"
NEXTAUTH_SECRET="${config.nextAuthSecret}"

# Google OAuth
GOOGLE_CLIENT_ID="${config.googleClientId}"
GOOGLE_CLIENT_SECRET="${config.googleClientSecret}"

# Amazon Login
AMAZON_CLIENT_ID="${config.amazonClientId}"
AMAZON_CLIENT_SECRET="${config.amazonClientSecret}"

# Stripe Payment Processing
STRIPE_PUBLISHABLE_KEY="${config.stripePublishableKey}"
STRIPE_SECRET_KEY="${config.stripeSecretKey}"
STRIPE_WEBHOOK_SECRET="${config.stripeWebhookSecret}"

# Email Configuration
SMTP_HOST="smtp.gmail.com"
SMTP_PORT="587"
SMTP_USER="${config.smtpUser}"
SMTP_PASS="${config.smtpPass}"
FROM_EMAIL="noreply@${config.domain}"

# Business Configuration
BUSINESS_NAME="SKOOT Transportation"
SUPPORT_EMAIL="${config.businessEmail}"
SUPPORT_PHONE="${config.supportPhone}"

# Security
ALLOWED_ORIGINS="https://${config.domain},https://www.${config.domain}"
`;
}

function createVercelConfig(config) {
  return {
    "version": 2,
    "builds": [
      {
        "src": "package.json",
        "use": "@vercel/next"
      }
    ],
    "env": {
      "NEXTAUTH_URL": `https://${config.domain}`,
      "ALLOWED_ORIGINS": `https://${config.domain},https://www.${config.domain}`
    },
    "functions": {
      "src/app/api/**/*.ts": {
        "maxDuration": 30
      }
    }
  };
}

// Run the deployment assistant
main().catch(console.error);