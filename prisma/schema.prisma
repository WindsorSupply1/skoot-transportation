generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @default(cuid())
  email                 String          @unique
  firstName             String
  lastName              String
  phone                 String?
  isAdmin               Boolean         @default(false)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  dateOfBirth           DateTime?
  emergencyContact      String?
  emergencyPhone        String?
  customerType          CustomerType    @default(REGULAR)
  studentId             String?
  militaryId            String?
  isLegacyCustomer      Boolean         @default(false)
  legacyPrice           Float?
  image                 String?
  emailVerified         DateTime?
  guestBookingHash      String?
  accounts              Account[]
  bookings              Booking[]
  sentAdminMessages     DriverMessage[] @relation("SentByAdmin")
  receivedAdminMessages DriverMessage[] @relation("SentToAdmin")
  sessions              Session[]
  testimonials          Testimonial[]
  createdTripEvents     TripEvent[]     @relation("CreatedTripEvents")

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Route {
  id          String     @id @default(cuid())
  name        String
  origin      String
  destination String
  duration    Int
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bookings    Booking[]
  schedules   Schedule[]

  @@map("routes")
}

model Location {
  id              String    @id @default(cuid())
  name            String
  address         String
  city            String
  state           String
  zipCode         String
  latitude        Float?
  longitude       Float?
  isPickup        Boolean   @default(false)
  isDropoff       Boolean   @default(false)
  isActive        Boolean   @default(true)
  sortOrder       Int       @default(0)
  instructions    String?
  maxCapacity     Int?
  operatingHours  Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  dropoffBookings Booking[] @relation("DropoffLocation")
  pickupBookings  Booking[] @relation("PickupLocation")

  @@map("locations")
}

model Schedule {
  id         String      @id @default(cuid())
  routeId    String
  dayOfWeek  Int
  time       String
  capacity   Int         @default(15)
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  departures Departure[]
  route      Route       @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

model Vehicle {
  id              String            @id @default(cuid())
  name            String
  capacity        Int               @default(15)
  priceMultiplier Float             @default(1.0)
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  departures      Departure[]
  vehicleTracking VehicleTracking[]

  @@map("vehicles")
}

model Departure {
  id                    String                 @id @default(cuid())
  scheduleId            String
  date                  DateTime
  capacity              Int                    @default(15)
  bookedSeats           Int                    @default(0)
  status                DepartureStatus        @default(SCHEDULED)
  driverNotes           String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  vehicleId             String?
  reminderSent          Boolean                @default(false)
  reminderSentAt        DateTime?
  bookings              Booking[]
  returnBookings        Booking[]              @relation("ReturnBooking")
  customerNotifications CustomerNotification[] @relation("DepartureNotifications")
  schedule              Schedule               @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  vehicle               Vehicle?               @relation(fields: [vehicleId], references: [id])
  driverMessages        DriverMessage[]
  liveStatus            LiveDepartureStatus?
  vehicleTracking       VehicleTracking[]

  @@unique([scheduleId, date])
  @@map("departures")
}

model PricingTier {
  id           String       @id @default(cuid())
  name         String
  description  String?
  basePrice    Float
  customerType CustomerType
  isActive     Boolean      @default(true)
  validFrom    DateTime     @default(now())
  validTo      DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  bookings     Booking[]

  @@map("pricing_tiers")
}

model Booking {
  id                    String                 @id @default(cuid())
  bookingNumber         String                 @unique @default(cuid())
  userId                String?
  routeId               String
  departureId           String
  pickupLocationId      String
  dropoffLocationId     String
  pricingTierId         String
  guestEmail            String?
  guestPhone            String?
  guestFirstName        String?
  guestLastName         String?
  isGuestBooking        Boolean                @default(false)
  passengerCount        Int                    @default(1)
  totalAmount           Float
  extraLuggageBags      Int                    @default(0)
  extraLuggageFee       Float                  @default(0)
  petCount              Int                    @default(0)
  petFee                Float                  @default(0)
  isRoundTrip           Boolean                @default(false)
  returnDepartureId     String?
  status                BookingStatus          @default(PENDING)
  bookedAt              DateTime               @default(now())
  confirmedAt           DateTime?
  cancelledAt           DateTime?
  completedAt           DateTime?
  specialRequests       String?
  adminNotes            String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  departure             Departure              @relation(fields: [departureId], references: [id])
  dropoffLocation       Location               @relation("DropoffLocation", fields: [dropoffLocationId], references: [id])
  pickupLocation        Location               @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  pricingTier           PricingTier            @relation(fields: [pricingTierId], references: [id])
  returnDeparture       Departure?             @relation("ReturnBooking", fields: [returnDepartureId], references: [id])
  route                 Route                  @relation(fields: [routeId], references: [id])
  user                  User?                  @relation(fields: [userId], references: [id])
  customerNotifications CustomerNotification[]
  passengers            Passenger[]
  payment               Payment?

  @@map("bookings")
}

model Passenger {
  id          String    @id @default(cuid())
  bookingId   String
  firstName   String
  lastName    String
  age         Int?
  email       String?
  phone       String?
  seatNumber  String?
  checkedIn   Boolean   @default(false)
  checkedInAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("passengers")
}

model Payment {
  id            String        @id @default(cuid())
  bookingId     String        @unique
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  processedAt   DateTime?
  refundedAt    DateTime?
  refundAmount  Float?
  refundReason  String?
  processorFee  Float?
  netAmount     Float?
  failureReason String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  booking       Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model EmailTemplate {
  id        String     @id @default(cuid())
  name      String     @unique
  subject   String
  htmlBody  String
  textBody  String?
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  emailLogs EmailLog[]

  @@map("email_templates")
}

model EmailLog {
  id           String         @id @default(cuid())
  templateId   String?
  userId       String?
  bookingId    String?
  toEmail      String
  fromEmail    String
  subject      String
  status       EmailStatus    @default(PENDING)
  sentAt       DateTime?
  failedAt     DateTime?
  errorMessage String?
  createdAt    DateTime       @default(now())
  template     EmailTemplate? @relation(fields: [templateId], references: [id])

  @@map("email_logs")
}

model Testimonial {
  id         String   @id @default(cuid())
  userId     String?
  name       String
  title      String?
  content    String
  rating     Int
  isVisible  Boolean  @default(false)
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])

  @@map("testimonials")
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  category  String?
  sortOrder Int      @default(0)
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("string")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}

model RevenueReport {
  id                  String   @id @default(cuid())
  reportDate          DateTime @unique
  totalBookings       Int
  totalRevenue        Float
  totalPassengers     Int
  averageBookingValue Float
  cancellationRate    Float
  occupancyRate       Float
  createdAt           DateTime @default(now())

  @@map("revenue_reports")
}

model Driver {
  id               String            @id @default(cuid())
  email            String            @unique
  phone            String            @unique
  firstName        String
  lastName         String
  licenseNumber    String?
  photoUrl         String?
  rating           Float             @default(5.0)
  totalTrips       Int               @default(0)
  isActive         Boolean           @default(true)
  pinCode          String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  sentMessages     DriverMessage[]   @relation("SentByDriver")
  receivedMessages DriverMessage[]   @relation("SentToDriver")
  tripEvents       TripEvent[]
  vehicleTracking  VehicleTracking[]

  @@map("drivers")
}

model VehicleTracking {
  id                 String               @id @default(cuid())
  vehicleId          String
  driverId           String?
  departureId        String
  currentLatitude    Float?
  currentLongitude   Float?
  lastLocationUpdate DateTime?
  status             VehicleStatus        @default(SCHEDULED)
  tripStartedAt      DateTime?
  tripCompletedAt    DateTime?
  estimatedArrival   DateTime?
  actualArrival      DateTime?
  passengerCount     Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  gpsTracking        GpsTracking[]
  liveStatus         LiveDepartureStatus?
  tripEvents         TripEvent[]
  departure          Departure            @relation(fields: [departureId], references: [id])
  driver             Driver?              @relation(fields: [driverId], references: [id])
  vehicle            Vehicle              @relation(fields: [vehicleId], references: [id])

  @@map("vehicle_tracking")
}

model GpsTracking {
  id                String          @id @default(cuid())
  vehicleTrackingId String
  latitude          Float
  longitude         Float
  speed             Float?
  heading           Int?
  accuracy          Float?
  timestamp         DateTime        @default(now())
  createdAt         DateTime        @default(now())
  vehicleTracking   VehicleTracking @relation(fields: [vehicleTrackingId], references: [id], onDelete: Cascade)

  @@map("gps_tracking")
}

model DriverMessage {
  id              String      @id @default(cuid())
  fromDriverId    String?
  toDriverId      String?
  fromAdminUserId String?
  toAdminUserId   String?
  departureId     String?
  messageType     MessageType @default(GENERAL)
  subject         String?
  message         String
  isUrgent        Boolean     @default(false)
  isRead          Boolean     @default(false)
  readAt          DateTime?
  createdAt       DateTime    @default(now())
  departure       Departure?  @relation(fields: [departureId], references: [id])
  fromAdmin       User?       @relation("SentByAdmin", fields: [fromAdminUserId], references: [id])
  fromDriver      Driver?     @relation("SentByDriver", fields: [fromDriverId], references: [id])
  toAdmin         User?       @relation("SentToAdmin", fields: [toAdminUserId], references: [id])
  toDriver        Driver?     @relation("SentToDriver", fields: [toDriverId], references: [id])

  @@map("driver_messages")
}

model CustomerNotification {
  id               String             @id @default(cuid())
  bookingId        String
  departureId      String
  notificationType NotificationType
  recipientPhone   String?
  recipientEmail   String?
  subject          String?
  message          String
  status           NotificationStatus @default(PENDING)
  sentAt           DateTime?
  deliveredAt      DateTime?
  trackingUrl      String?
  createdAt        DateTime           @default(now())
  booking          Booking            @relation(fields: [bookingId], references: [id])
  departure        Departure          @relation("DepartureNotifications", fields: [departureId], references: [id])

  @@map("customer_notifications")
}

model TripEvent {
  id                String          @id @default(cuid())
  vehicleTrackingId String
  eventType         EventType
  eventData         Json?
  latitude          Float?
  longitude         Float?
  createdByDriverId String?
  createdByAdminId  String?
  createdAt         DateTime        @default(now())
  createdByAdmin    User?           @relation("CreatedTripEvents", fields: [createdByAdminId], references: [id])
  createdByDriver   Driver?         @relation(fields: [createdByDriverId], references: [id])
  vehicleTracking   VehicleTracking @relation(fields: [vehicleTrackingId], references: [id], onDelete: Cascade)

  @@map("trip_events")
}

model LiveDepartureStatus {
  id                  String           @id @default(cuid())
  departureId         String           @unique
  vehicleTrackingId   String?          @unique
  currentStatus       LiveStatus       @default(SCHEDULED)
  statusMessage       String?
  estimatedDeparture  DateTime?
  actualDeparture     DateTime?
  estimatedArrival    DateTime?
  currentLocationName String?
  progressPercentage  Int              @default(0)
  delayMinutes        Int              @default(0)
  lastUpdateByDriver  DateTime?
  lastAutomaticUpdate DateTime?
  isLiveTracked       Boolean          @default(false)
  trackingUrl         String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  departure           Departure        @relation(fields: [departureId], references: [id])
  vehicleTracking     VehicleTracking? @relation(fields: [vehicleTrackingId], references: [id])

  @@map("live_departure_status")
}

enum CustomerType {
  REGULAR
  STUDENT
  MILITARY
  LEGACY
}

enum DepartureStatus {
  SCHEDULED
  BOARDING
  IN_TRANSIT
  COMPLETED
  CANCELLED
  DELAYED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  PAID
  CHECKED_IN
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

enum VehicleStatus {
  SCHEDULED
  BOARDING
  EN_ROUTE
  ARRIVED
  COMPLETED
  DELAYED
  EMERGENCY
}

enum MessageType {
  GENERAL
  DELAY
  EMERGENCY
  ARRIVAL
  PASSENGER_UPDATE
  ROUTE_CHANGE
}

enum NotificationType {
  SMS
  EMAIL
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum EventType {
  TRIP_STARTED
  LOCATION_UPDATE
  STATUS_CHANGE
  DELAY_REPORTED
  PASSENGER_UPDATE
  TRIP_COMPLETED
  EMERGENCY
}

enum LiveStatus {
  SCHEDULED
  BOARDING
  DEPARTED
  EN_ROUTE
  DELAYED
  ARRIVED
  COMPLETED
  CANCELLED
}
